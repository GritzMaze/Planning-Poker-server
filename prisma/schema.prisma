generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String?  @unique
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  Board     Board[]
  Column    Column[]
  Card      Card[]
}

model Board {
  id        Int      @id @default(autoincrement())
  name      String
  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  cards     Card[]
  columns   Column[]
}

model Column {
  id        Int      @id @default(autoincrement())
  name      String
  boardId   Int
  color     String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  cards      Card[]
}

model Card {
  id           Int      @id @default(autoincrement())
  name         String
  description  String
  priority     String
  columnId     Int
  column       Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  boardId      Int
  board        Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  assignedToId Int?
  assignedTo   User?    @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
}
